        #region instanceAdding

        //Aggiunta funzioni
        private bool isString(string s)
        {
            return !String.IsNullOrWhiteSpace(s);
        }

        private bool isInt(int i)
        {
            return (i != -1);
        }

        private bool isFloat(float f)
        {
            return (f != -1);
        }

        private int convertStringInt(string i)
        {
            int result = 0;
            return Int32.TryParse(i, out result) ? result : -1;
        }

        private float convertStringFloat(string i)
        {
            float result = 0;
            return float.TryParse(i, out result) ? result : -1;
        }


        private void submitAddOrdineBtn_Click(object sender, EventArgs e)
        {
            Ordine o = new Ordine();

            o.ID_ordine = this.textBox6.Text;
            o.Fattura_Partita_IVA = this.comboBox30.ValueMember;
            o.Numero = convertStringInt(this.comboBox29.ValueMember);
            o.Data_ordine = this.dateTimePicker11.Value;
            o.Data_spedizione = this.dateTimePicker12.Value;
            o.Data_consegna_1 = this.dateTimePicker13.Value;
            o.Data_consegna_2 = null;
            o.Tipo_Ordine = this.radioButton1.Checked ? 'r' : 'v';

            try
            {
                if (!(isString(o.ID_ordine) && isString(o.Fattura_Partita_IVA) && isInt(o.Numero)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Ordine.InsertOnSubmit(o);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }
            this.Close();
        }

        private void submitVenditaBtn_Click(object sender, EventArgs e)
        {
            Veicolo_venduto vv = new Veicolo_venduto();

            vv.Numero_telaio = this.textBox67.Text;
            vv.Contratto_Numero = convertStringInt(this.comboBox20.ValueMember);
            vv.Ordine_ID_ordine = this.comboBox18.ValueMember;
            vv.Veicolo_Codice = this.comboBox19.ValueMember;

            try
            {
                if (!(isString(vv.Numero_telaio) &&
                        isString(vv.Veicolo_Codice) &&
                        isString(vv.Ordine_ID_ordine) &&
                        isInt(vv.Contratto_Numero)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Veicolo_venduto.InsertOnSubmit(vv);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitOptToVeicBtn_Click(object sender, EventArgs e)
        {
            //nON CAPISCO PRIMA è BINDATO CON RIPARAZIONE POI C'E OPTIONAL
            supporto s = new supporto();
            s.Optional_Codice = this.comboRic.ValueMember;
            s.Veicolo_Codice = this.comboVeicCat.ValueMember;
            this.Close();
        }

        private void submitOptionalBtn_Click(object sender, EventArgs e)
        {
            Optional o = new Optional();

            o.Codice = this.textBox65.Text;
            o.Nome = this.textBox64.Text;
            o.Prezzo = convertStringFloat(this.textBox63.Text);
            o.Descrizione = this.textBox66.Text;

            try
            {
                if (!(isString(o.Codice) &&
                        isString(o.Nome) &&
                        isString(o.Descrizione) &&
                        isFloat(o.Prezzo)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Optional.InsertOnSubmit(o);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitModelloBtn_Click(object sender, EventArgs e)
        {
            Modello_veicolo m = new Modello_veicolo();

            m.Nome = this.textBox74.Text;
            m.Anno = this.dateTimePicker15.Value;
            m.Fornitore_Partita_IVA = this.comboBox15.ValueMember;

            try
            {
                if (!(isString(m.Nome) &&
                        isString(m.Fornitore_Partita_IVA)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Modello_veicolo.InsertOnSubmit(m);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitRicambioBtn_Click(object sender, EventArgs e)
        {
            // fare check sul tipo di fornitore per determinare il tipo di ricambio (generico/originale)
            this.Close();
        }

        private void submitFornitoreBtn_Click(object sender, EventArgs e)
        {
            Fornitore f = new Fornitore();
            f.CAP = this.textBoxFornCAP.Text;
            f.Citta = this.textBoxFornCitta.Text;
            f.Indirizzo = this.textBoxFornIndirizzo.Text;
            f.Indirizzo_e_mail_1 = this.textBoxFornEmail1.Text;
            f.Indirizzo_e_mail_2 = this.textBoxFornEmail2.Text;
            f.Partita_IVA = this.textBoxFornPIVA.Text;
            f.Provincia = this.textBoxFornProvincia.Text;
            f.Ragione_Sociale = this.textBoxFornRagSoc.Text;
            f.Recapito_1 = this.textBoxFornRec1.Text;
            f.Recapito_2 = this.textBoxFornRec2.Text;
            f.Recapito_3 = this.textBoxFornRec3.Text;
            f.Tipo_CasaProduttrice = this.checkBoxFornVeic.Checked ? 'r' : ' ';
            f.Tipo_Ricambi = this.checkBoxFornRic.Checked ? 'r' : ' ';

            try
            {
                if (!(isString(f.CAP) &&
                        isString(f.Citta) &&
                        isString(f.Indirizzo) &&
                        isString(f.Indirizzo_e_mail_1) &&
                        isString(f.Indirizzo_e_mail_2) &&
                        isString(f.Partita_IVA) &&
                        isString(f.Provincia) &&
                        isString(f.Ragione_Sociale) &&
                        isString(f.Recapito_1) &&
                        isString(f.Recapito_2) &&
                        isString(f.Recapito_3)
                    ))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Fornitore.InsertOnSubmit(f);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }
            this.Close();
        }

        private void submitFatturaBtn_Click(object sender, EventArgs e)
        {
            Fattura_di_acquisto f = new Fattura_di_acquisto();
            f.Numero = convertStringInt(this.textBox5.Text);
            f.Data = this.dateTimePicker1.Value;
            f.Importo_complessivo = convertStringFloat(this.textBox7.Text);
            f.Fornitore_Partita_IVA = this.comboBox1.ValueMember;
            f.Mod_Pagamento_Da = convertStringFloat(this.comboBox22.ValueMember);

            try
            {
                if (!(isInt(f.Numero) &&
                      isFloat(f.Importo_complessivo) &&
                      isString(f.Fornitore_Partita_IVA) &&
                      isFloat(f.Mod_Pagamento_Da)
                    ))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Fornitore.InsertOnSubmit(f);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitContrattoBtn_Click(object sender, EventArgs e)
        {
            Contratto_di_vendita v = new Contratto_di_vendita();
            //Da aggiungere numero

            v.Data = this.dateTimePicker9.Value;
            v.Importo_complessivo = convertStringFloat(this.textBox21.Text);
            v.Nostre_Mod_Da = convertStringFloat(this.comboBox6.ValueMember);
            v.Cliente_PartitaIVA_CodiceFiscale = this.comboBox5.ValueMember;
            try
            {
                if (!(isString(v.Cliente_PartitaIVA_CodiceFiscale) &&
                        isFloat(v.Importo_complessivo) &&
                        isFloat(v.Nostre_Mod_Da)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Contratto_di_vendita.InsertOnSubmit(v);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }
            this.Close();
        }

        private void submitClienteABtn_Click(object sender, EventArgs e)
        {
            Cliente c = new Cliente();

            c.PartitaIVA_CodiceFiscale = this.textBox82.Text;
            c.Ragione_sociale = this.textBox80.Text;
            c.Indirizzo_e_mail_1 = this.textBox81.Text;
            c.Indirizzo_e_mail_2 = this.textBox15.Text;
            c.Recapito_1 = this.textBox79.Text;
            c.Recapito_2 = this.textBox17.Text;
            c.Recapito_3 = this.textBox1.Text;
            c.Indirizzo = this.textBox31.Text;
            c.Citta = this.textBox28.Text;
            c.Provincia = this.textBox30.Text;
            c.CAP = this.textBox32.Text;

            try
            {
                if ( ! (  isString(c.PartitaIVA_CodiceFiscale) &&
                          isString(c.Ragione_sociale) &&
                          isString(c.Indirizzo_e_mail_1) &&
                          isString(c.Recapito_1) &&
                          isString(c.Indirizzo) &&
                          isString(c.Citta) &&
                          isString(c.Citta) &&
                          isString(c.Provincia) &&
                          isString(c.CAP)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Contratto_di_vendita.InsertOnSubmit(c);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitGiacenzaBtn_Click(object sender, EventArgs e)
        {

            Giacenza g = new Giacenza();

            g.Ricambio_Codice = this.comboBox12.ValueMember;
            g.Numero = convertStringInt(this.textBox4.Text);
            g.Data = this.dateTimePicker6.Value;
            g.Quantita = convertStringInt(this.textBox46.Text);
            g.Causale = this.textBox48.Text;

            try
            {
                if (!(isString(g.Ricambio_Codice) &&
                    isString(g.Causale) &&
                    isInt(g.Quantita) &&
                    isInt(g.Numero)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Giacenza.InsertOnSubmit(g);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }
            this.Close();
        }

        private void submitPagamentoBtn_Click(object sender, EventArgs e)
        {
            Pagamento_cAcquisto p = new Pagamento_cAcquisto();
            p.Fattura_Partita_IVA = this.comboFornitore.Text;
            p.Fattura_Numero = convertStringInt(this.comboFattura.ValueMember);
            p.Data = this.dateTimePicker4.Value;
            p.Importo = convertStringFloat(this.textBox29.Text);

            try
            {
                if (!(  isString(p.Fattura_Partita_IVA) &&                    
                        isInt(p.Fattura_Numero) &&
                        isFloat(p.Importo)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Giacenza.InsertOnSubmit(p);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitPerfTraspBtn_Click(object sender, EventArgs e)
        {
            //caso pefezionamento ORDINE vs TRASPORTO_CORRIERE
            this.Close();
        }

        private void submitTrasportoBtn_Click(object sender, EventArgs e)
        {
            Trasporto t = new Trasporto();

            t.Codice = this.textBox26.Text;
            t.Contratto_Numero = convertStringInt(this.comboBox8.ValueMember);
            t.Costo = convertStringFloat(this.textBox25.Text);
            t.Data_consegna_1 = this.dateTimePicker2.Value;
            t.Data_consegna_2 = null;
            t.Corriere_Partita_IVA = this.comboBox7.ValueMember;
            t.Indirizzo = this.textBox19.Text;
            t.Citta = this.textBox27.Text;
            t.Provincia = this.textBox24.Text;
            t.CAP = this.textBox20.Text;

            try
            {
                if (!(isString(t.Codice) &&
                    isString(t.Corriere_Partita_IVA) &&
                    isString(t.Indirizzo) &&
                    isString(t.Citta) &&
                    isString(t.Provincia) &&
                    isString(t.CAP) &&
                    isInt(t.Contratto_Numero) &&
                    isFloat(t.Costo)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Trasporto.InsertOnSubmit(v);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }


            this.Close();
        }

        private void submitModalitaPagBtn_Click(object sender, EventArgs e)
        {
            /* mino uso questo metodo sia per le nostre modalità di pagamento che per quelle del
             * fornitore, il se inserire le nostre modalità o quelle del fornitore lo aggiungo poi io
             */
            

            Modalita_di_pagamento mp = new Modalita_di_pagamento();
            Nostre_modalita_di_pagamento nmp = new Nostre_modalita_di_pagamento();
            mp.Fornitore_Partita_IVA = this.fornAddModPagComboBox.Text;
            nmp.Da = mp.Da = convertStringFloat( this.textBox8.Text);
            nmp.A = mp.A = convertStringFloat(this.textBox9.Text);
            nmp.Numero_rate = mp.Numero_rate = convertStringInt(this.textBox10.Text);
            nmp.Periodicita = mp.Periodicita = this.textBox11.Text;
            nmp.Tasso_interesse = mp.Tasso_interesse = convertStringFloat(this.textBox12.Text);

            try
            {
                if (!(  isString(mp.Fornitore_Partita_IVA) &&
                        isFloat(mp.Da) &&
                        isFloat(mp.A) &&
                        isInt(mp.Numero_rate) &&
                        isString(mp.Periodicita) &&
                        isFloat(mp.Tasso_interesse)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Trasporto.InsertOnSubmit(mp); qui scegli se aggiungere a uno o l'altro
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }


            this.Close();
        }

        private void submitRevisioneBtn_Click(object sender, EventArgs e)
        {

            this.Close();
        }

        private void submitVeicoloBtn_Click(object sender, EventArgs e)
        {
            Veicolo_in_catalogo v = new Veicolo_in_catalogo();
            v.Codice = this.textBox53.Text;
            v.Modello_Nome = this.comboBox14.ValueMember;
            v.Modello_Partita_IVA = this.comboBox24.ValueMember;
            v.Modello_Anno = this.dateTimePicker14.Value;

            v.Prezzo_base =convertStringFloat(this.textBox51.Text);
            v.No_posti =convertStringInt(this.textBox55.Text);
            v.Capienza_bagagliaio =convertStringFloat(this.textBox59.Text);
            v.No_porte = convertStringInt(this.textBox58.Text);

            v.Potenza = convertStringFloat(this.textBox52.Text);
            v.Trazione = this.textBox61.Text;
            v.Consumi = convertStringFloat(this.textBox54.Text);
            v.Omologazione = this.textBox57.Text;
            v.Cilindrata =convertStringFloat( this.textBox49.Text);
            v.Cambio = this.textBox60.Text;
            v.Tipo_alimentazione = this.textBox50.Text;
            v.Capacita_serbatorio =convertStringFloat(this.textBox56.Text);

            try
            {
                if (!(  isString(v.Codice) &&
                        isString(v.Modello_Nome) &&
                        isString(v.Modello_Partita_IVA) &&

                        isFloat(v.Prezzo_base) &&
                        isFloat(v.Capienza_bagagliaio) &&
                        isInt(v.No_posti) &&
                        isInt(v.No_porte) &&

                        isString(v.Trazione) &&
                        isString(v.Omologazione) &&
                        isFloat(v.Consumi) &&
                        isFloat(v.Capacita_serbatorio) &&
                        isFloat(v.Cilindrata) &&
                        isString(v.Tipo_alimentazione) &&
                        isString(v.Cambio) &&
                        isFloat(v.Potenza)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Trasporto.InsertOnSubmit(v); 
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitDettaglioBtn_Click(object sender, EventArgs e)
        {
            utilizzo u = new utilizzo();

            u.Veicolo_Numero_telaio = this.comboBox25.ValueMember;
            u.Riparazione_Numero = convertStringInt(this.comboBox1.ValueMember);
            u.Ricambio_Codice = this.comboBox10.ValueMember;
            u.quantita = convertStringInt(this.textBox16.Text);

            try
            {
                if (!(  isString(u.Veicolo_Numero_telaio) &&
                        isString(u.Ricambio_Codice) &&
                        isInt(u.Riparazione_Numero) &&
                        isInt((int)u.quantita)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Riparazione.InsertOnSubmit(r);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitRiparazione_Click(object sender, EventArgs e)
        {
            Riparazione r = new Riparazione();

            r.Veicolo_Numero_telaio = this.comboBox2.ValueMember;
            r.Numero = convertStringInt(this.textBox43.Text);
            r.Data = this.dateTimePicker5.Value;
            r.Importo_complessivo = convertStringFloat(this.textBox42.Text);
            try
            {
                if (!(isString(r.Veicolo_Numero_telaio) &&
                        isInt(r.Numero) &&
                        isFloat(r.Importo_complessivo)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Riparazione.InsertOnSubmit(r);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }

            this.Close();
        }

        private void submitAddVeicRicToOrderBtn_Click(object sender, EventArgs e)
        {
            //uso lo stesso metodo per inserire un veicolo/ricambio in un dettaglio d'ordine
            //il check add veicolo/ricambio lo farà io, completa il resto
            this.Close();
        }

        private void submitClientePBtn_Click(object sender, EventArgs e)
        {
            /* settare il tipo di cliente */
            this.Close();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Revisione r = new Revisione();

            r.Veicolo_Numero_telaio = this.comboBox26.ValueMember;
            r.Numero = convertStringInt(this.comboBox27.ValueMember);
            r.Data_esecuzione = this.dateTimePicker7.Value;

            try
            {
                if (!(  isString(r.Veicolo_Numero_telaio) &&
                        isInt(r.Numero)))
                {
                    throw new Exception("Campi vuoti");
                }
                //db.Riparazione.InsertOnSubmit(r);
                //db.SubmitChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Errore di inserimento dati");
            }
            this.Close();
        }


        #endregion